#!/bin/bash

# run script/deploy -h for help
# ~/pihole/script/deploy -r="${{ steps.branch-deploy.outputs.ref }}" -f="${{ steps.branch-deploy.outputs.fork_checkout }}" -d="pihole" -n="${{ steps.branch-deploy.outputs.fork_full_name }}"

set -e

BASE_BRANCH="main"

function usage()
{
    echo -e "\t ============================== script/deploy usage =============================="
    echo -e "\t-h --help               : displays help message"
    echo -e "\t-f --fork               : the checkout command to use if a fork"
    echo -e "\t-n --fork-full-name     : the full name of the fork source in 'org/repo' format"
    echo -e "\t-d --dir                : the directory to enter for the deployment"
    echo -e "\t-r --ref                : ref to deploy"
}

while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`
    case $PARAM in
      -h | --help)
        usage
        exit
        ;;
      -f | --fork)
        fork=$VALUE
        ;;
      -n | --fork-full-name)
        fork_full_name=$VALUE
        ;;
      -d | --dir)
        dir=$VALUE
        ;;
      -r | --ref)
        ref=$VALUE
        ;;
      *)
      echo "ERROR: unknown parameter \"$PARAM\""
      usage
      exit 1
      ;;
    esac
    shift
done

# If a deployment dir is specified, enter it
if [[ -n $dir ]]; then
  cd ~/$dir
fi

# If a fork deployment is requested use the fork branch
if [[ -n $fork ]]; then
  echo "fork deployment requested"
  forkarray=($fork)
  git checkout -b $fork || git fetch --all && git reset --hard origin/$BASE_BRANCH && git branch -D $fork && git checkout -b $fork
  git pull "https://github.com/$fork_full_name.git" ${forkarray[1]}
# If an exact $ref was provided, checkout that ref
elif [[ -n $ref ]]; then
  echo "branch deployment requested"
  git fetch --all
  git reset --hard origin/$ref
# otherwise, just stay on the current branch
else
  echo "current repo deployment requested"
fi

echo "[-] Killing old docker processes"
sudo docker compose down --remove-orphans -v -t 1

echo "[i] Building docker container"
sudo docker compose up --build -d

echo "[+] Containers are now running!"

# Poll for 60 seconds to ensure all containers are healthy
end=$((SECONDS+60))

while [ $SECONDS -lt $end ]; do
  # Check the status of all containers
  if [ "$(sudo docker compose ps -q | xargs sudo docker inspect -f '{{.State.Health.Status}}' | grep -v healthy)" = "" ]; then
    echo "All containers are healthy."
    break
  else
    echo "Waiting for containers to become healthy..."
    sleep 5
  fi
done

# for runway
echo remote-deploy-success
